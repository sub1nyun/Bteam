1. 자동로그인
- 자동 로그인은 방식이 여러가지가 존재
(대표적 쿠키, 세션 등 임시 저장 데이터 공간을 활요한느 방법 <= 대중적 사용)
(SharedPreferences <= 임시 공유 자원, 데이터 쿠키 정보 삭제 시 삭제 되는 영역의 정보를 의미한다 ) -> 사용할 방법 LoingAc~
(기기의 ID, IP 등 OS단의 인증을 이용하는 방법 <= 해킹에 취약함) 특정기기나 특정 IP 사용이면 로그인 -> 사용률 낮음(보안)

    //초기에 우리가 공유자원에 어떤 데이터를 Key로 지정을 해서 넣어놓지 않은 상태
    //데이터가 있는지를 먼저 확인해야함
    SharedPreferences
    preferences = getPreferences(LoginActivity.MODE_PRIVATE);
    getPreferences(Context.(어디에서 저장시켰는지 구분)모드값을 입력함) <-메소드
    MODE_PRIVATE : 자기 앱 내에서만 사용. 외부 앱에서 접근 불가 (※)
    MODE_WORLD_READABEL&WRITEBLE : 읽기, 쓰기 권한을 주는 모드가 있으나 보안상의 이유로 많이 사용안함
    공유 자원에 데이터를 입력하는 경우 사용하는 것은 SharedPreferences.Editer 객체를 사용

    SharedPreferences.Editor editor = preferences.edit(); //에디터 객체의 초기화 식
    // putBoolean <- true, false, PutFloat, Int, Long <- 숫자값 (소수까지 저장할때 선택해서 저장)
    //putString <- 문자열을 저장
    editor.putString("key", value);
    editor.apply(); // 저장 확정

    //저장 된 데이터를 지울때 사용하는 메소드
    editor.remove("key"); <- 지정 된 키로 저장 된 데이터를 삭제한다.
    editor.clear(); <- 해당하는 공유자원 자체에 있는 모든 내용을 삭제한다(모든 데이터가 유실되므로 많이 사용 안 함)

    editor.apply(); // <- 임시로 데이터를 저장하거나 수정했을때 바로 반영되는것을 막아두기
                    <- 중간에 데이터를 저장하다가 오류가 발생하면 저장하는것을 멈추기 위해서






  preferences = getPreferences(LoginActivity.MODE_PRIVATE); //로그인 정보의 경우는 PRIVATE 사용
            //초기에 우리가 공유자원에 어떤 데이터를 key로 지정을 해서 넣어놓지 않은 상태
            //데이터가 존재하는지 먼저 확인
            SharedPreferences.Editor editor = preferences.edit(); //Nasted Class 중첩클래스 new 초기화 아닌 만들어진 메소드로 사용함
            editor.putString("id", edt_id.getText()+ ""); //String 값 -> putString
            editor.putString("pw", edt_pw.getText()+ "");
            editor.apply(); // 저장 확정 -> 파라매터 추가시 오류가 난다면 추가 하지 않기위해서 존재함
